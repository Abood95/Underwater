# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from underwater_robot/SetupRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetupRequest(genpy.Message):
  _md5sum = "ef73cd0e20eabb13fd64cbebfb4778d9"
  _type = "underwater_robot/SetupRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool dummy
"""
  __slots__ = ['dummy']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dummy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetupRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dummy is None:
        self.dummy = False
    else:
      self.dummy = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.dummy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.dummy,) = _get_struct_B().unpack(str[start:end])
      self.dummy = bool(self.dummy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.dummy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.dummy,) = _get_struct_B().unpack(str[start:end])
      self.dummy = bool(self.dummy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from underwater_robot/SetupResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetupResponse(genpy.Message):
  _md5sum = "bafc5b3fd90a527bbc5748a08431908d"
  _type = "underwater_robot/SetupResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool done
bool imu
bool barometer
bool encoder1
bool encoder2
bool encoder3
int16 encoder1_offset
int16 encoder2_offset
int16 encoder3_offset

"""
  __slots__ = ['done','imu','barometer','encoder1','encoder2','encoder3','encoder1_offset','encoder2_offset','encoder3_offset']
  _slot_types = ['bool','bool','bool','bool','bool','bool','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       done,imu,barometer,encoder1,encoder2,encoder3,encoder1_offset,encoder2_offset,encoder3_offset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetupResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.done is None:
        self.done = False
      if self.imu is None:
        self.imu = False
      if self.barometer is None:
        self.barometer = False
      if self.encoder1 is None:
        self.encoder1 = False
      if self.encoder2 is None:
        self.encoder2 = False
      if self.encoder3 is None:
        self.encoder3 = False
      if self.encoder1_offset is None:
        self.encoder1_offset = 0
      if self.encoder2_offset is None:
        self.encoder2_offset = 0
      if self.encoder3_offset is None:
        self.encoder3_offset = 0
    else:
      self.done = False
      self.imu = False
      self.barometer = False
      self.encoder1 = False
      self.encoder2 = False
      self.encoder3 = False
      self.encoder1_offset = 0
      self.encoder2_offset = 0
      self.encoder3_offset = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B3h().pack(_x.done, _x.imu, _x.barometer, _x.encoder1, _x.encoder2, _x.encoder3, _x.encoder1_offset, _x.encoder2_offset, _x.encoder3_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.done, _x.imu, _x.barometer, _x.encoder1, _x.encoder2, _x.encoder3, _x.encoder1_offset, _x.encoder2_offset, _x.encoder3_offset,) = _get_struct_6B3h().unpack(str[start:end])
      self.done = bool(self.done)
      self.imu = bool(self.imu)
      self.barometer = bool(self.barometer)
      self.encoder1 = bool(self.encoder1)
      self.encoder2 = bool(self.encoder2)
      self.encoder3 = bool(self.encoder3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B3h().pack(_x.done, _x.imu, _x.barometer, _x.encoder1, _x.encoder2, _x.encoder3, _x.encoder1_offset, _x.encoder2_offset, _x.encoder3_offset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.done, _x.imu, _x.barometer, _x.encoder1, _x.encoder2, _x.encoder3, _x.encoder1_offset, _x.encoder2_offset, _x.encoder3_offset,) = _get_struct_6B3h().unpack(str[start:end])
      self.done = bool(self.done)
      self.imu = bool(self.imu)
      self.barometer = bool(self.barometer)
      self.encoder1 = bool(self.encoder1)
      self.encoder2 = bool(self.encoder2)
      self.encoder3 = bool(self.encoder3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B3h = None
def _get_struct_6B3h():
    global _struct_6B3h
    if _struct_6B3h is None:
        _struct_6B3h = struct.Struct("<6B3h")
    return _struct_6B3h
class Setup(object):
  _type          = 'underwater_robot/Setup'
  _md5sum = '81bdda0e5e12240216c90fa743ee071e'
  _request_class  = SetupRequest
  _response_class = SetupResponse
