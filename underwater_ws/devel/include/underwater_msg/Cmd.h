// Generated by gencpp from file underwater_msg/Cmd.msg
// DO NOT EDIT!


#ifndef UNDERWATER_MSG_MESSAGE_CMD_H
#define UNDERWATER_MSG_MESSAGE_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace underwater_msg
{
template <class ContainerAllocator>
struct Cmd_
{
  typedef Cmd_<ContainerAllocator> Type;

  Cmd_()
    : mode(0)
    , spinning_speed(0)
    , flipping_angle(0)
    , flipping_speed(0)  {
    }
  Cmd_(const ContainerAllocator& _alloc)
    : mode(0)
    , spinning_speed(0)
    , flipping_angle(0)
    , flipping_speed(0)  {
  (void)_alloc;
    }



   typedef int16_t _mode_type;
  _mode_type mode;

   typedef int16_t _spinning_speed_type;
  _spinning_speed_type spinning_speed;

   typedef int16_t _flipping_angle_type;
  _flipping_angle_type flipping_angle;

   typedef int16_t _flipping_speed_type;
  _flipping_speed_type flipping_speed;




  typedef boost::shared_ptr< ::underwater_msg::Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::underwater_msg::Cmd_<ContainerAllocator> const> ConstPtr;

}; // struct Cmd_

typedef ::underwater_msg::Cmd_<std::allocator<void> > Cmd;

typedef boost::shared_ptr< ::underwater_msg::Cmd > CmdPtr;
typedef boost::shared_ptr< ::underwater_msg::Cmd const> CmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::underwater_msg::Cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::underwater_msg::Cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace underwater_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'underwater_msg': ['/home/william/Underwater/underwater_ws/src/underwater_msg/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::underwater_msg::Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::underwater_msg::Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_msg::Cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_msg::Cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_msg::Cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_msg::Cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::underwater_msg::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26a53f33e9dfd663b81918f42c8e516a";
  }

  static const char* value(const ::underwater_msg::Cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26a53f33e9dfd663ULL;
  static const uint64_t static_value2 = 0xb81918f42c8e516aULL;
};

template<class ContainerAllocator>
struct DataType< ::underwater_msg::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "underwater_msg/Cmd";
  }

  static const char* value(const ::underwater_msg::Cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::underwater_msg::Cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 mode\n\
int16 spinning_speed\n\
int16 flipping_angle\n\
int16 flipping_speed\n\
";
  }

  static const char* value(const ::underwater_msg::Cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::underwater_msg::Cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.spinning_speed);
      stream.next(m.flipping_angle);
      stream.next(m.flipping_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::underwater_msg::Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::underwater_msg::Cmd_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "spinning_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.spinning_speed);
    s << indent << "flipping_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flipping_angle);
    s << indent << "flipping_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flipping_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNDERWATER_MSG_MESSAGE_CMD_H
